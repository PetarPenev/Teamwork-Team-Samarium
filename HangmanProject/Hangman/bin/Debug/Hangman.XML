<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hangman</name>
    </assembly>
    <members>
        <member name="T:Hangman.DisplayUtilities">
            <summary>
            Collection of methods for abstracting the displaying of 
            words or parts of words.
            </summary>
        </member>
        <member name="M:Hangman.DisplayUtilities.RevealALetter(System.String,System.Char[])">
            <summary>
            Displays the currently revealed part of the word.
            </summary>
            <param name="secretWord">The full word.</param>
            <param name="displayableWord">The characters to be displayed.</param>
        </member>
        <member name="M:Hangman.DisplayUtilities.PrintInvalidEntryMessage">
            <summary>
            Prints the message for invalid entry.
            </summary>
        </member>
        <member name="M:Hangman.DisplayUtilities.PrintDisplayableWord(System.Char[])">
            <summary>
            Prints the displayable part of the word.
            </summary>
            <param name="displayableWord">The word to be displayed.</param>
        </member>
        <member name="M:Hangman.DisplayUtilities.PrintWelcomeMessage">
            <summary>
            Prints the welcoming message for the player.
            </summary>
        </member>
        <member name="M:Hangman.DisplayUtilities.DisplayMessage(System.String,System.Boolean)">
            <summary>
            A method that abstracts the printing of a message intended for 
            the user.
            </summary>
            <param name="message">The message to be displayed.</param>
            <param name="addNewLine">Whether the message should end
            a paragraph.</param>
        </member>
        <member name="T:Hangman.Hangman">
            <summary>
            The main class for the Hangman game.
            </summary>
        </member>
        <member name="M:Hangman.Hangman.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangman.Hangman"/> class.
            </summary>
            <param name="maxNumberOfGames">The number of games to be played.</param>
        </member>
        <member name="M:Hangman.Hangman.Play">
            <summary>
            Starts new game until user enter exit command
            </summary>
        </member>
        <member name="M:Hangman.Hangman.GetWord">
            <summary>
            Returns a word that is to be guessed by the player.
            </summary>
            <returns>The word to be guessed.</returns>
        </member>
        <member name="M:Hangman.Hangman.NewGame">
            <summary>
            Starts one game
            </summary>
            <returns>True if user entered exit command.False if user wants to keep playing</returns>
        </member>
        <member name="M:Hangman.Hangman.CheckIfGameIsWon(System.Char[],System.Boolean,System.Int32)">
            <summary>
            Checks if current game is won
            </summary>
            <param name="displayableWord">contains unrevealed word</param>
            <param name="helpIsUsed">indicates if help is used in the current game</param>
            <param name="numberOfMistakesMade">total number of mistakes in current game</param>
            <returns>True if current game is won.False if current game isn't won</returns>
        </member>
        <member name="M:Hangman.Hangman.ProcessCommand(System.String,System.String,System.Char[])">
            <summary>
            Processes different game commands
            </summary>
            <param name="command">command entered by the user</param>
            <param name="secretWord">contains word that is generated by the game</param>
            <param name="displayableWord">contains unrevealed word</param>
        </member>
        <member name="M:Hangman.Hangman.ProcessUserGuess(System.String,System.String,System.Char[],System.Int32@)">
            <summary>
            Reveals suggested letter if it is in the hidden word
            </summary>
            <param name="suggestedLetter">contains letter suggested by the user</param>
            <param name="secretWord">contains word that is generated by the game</param>
            <param name="displayableWord">contains unrevealed word</param>
            <param name="numberOfMistakesMade">total number of mistakes in current game</param>
        </member>
        <member name="M:Hangman.Hangman.GetUserInput">
            <summary>
            Asks user for input until correct command is entered
            </summary>
            <returns>Correct user input</returns>
        </member>
        <member name="M:Hangman.Hangman.GetInputType(System.String)">
            <summary>
            Checks if the input is letter, command or invalid input.
            </summary>
            <param name="input">user input</param>
            <returns>Type of the input as InputType</returns>
        </member>
        <member name="P:Hangman.Hangman.Scoreboard">
            <summary>
            Gets an instance of the scoreboard.
            </summary>
        </member>
        <member name="P:Hangman.Hangman.IsCurrentGameOver">
            <summary>
            Gets or sets a value indicating whether the game is finished.
            </summary>
        </member>
        <member name="T:Hangman.InputType">
            <summary>
            The types of commands that the player can pass.
            </summary>
        </member>
        <member name="F:Hangman.InputType.Letter">
            <summary>
            A letter - guess for the word.
            </summary>
        </member>
        <member name="F:Hangman.InputType.Command">
            <summary>
            A command to be executed.
            </summary>
        </member>
        <member name="F:Hangman.InputType.Invalid">
            <summary>
            Invalid command.
            </summary>
        </member>
        <member name="T:Hangman.GameStarter">
            <summary>
            The class that starts the game.
            </summary>
        </member>
        <member name="M:Hangman.GameStarter.Main">
            <summary>
            The method that starts the game.
            </summary>
        </member>
        <member name="T:Hangman.Scoreboard">
            <summary>
            A class representing a scoreboard for a game.
            </summary>
        </member>
        <member name="F:Hangman.Scoreboard.maxNumberOfHighScoreEntries">
            <summary>
            Specifies the number of entries in the board.
            </summary>
        </member>
        <member name="F:Hangman.Scoreboard.highScoreList">
            <summary>
            The list containing the players and the number of their mistakes.
            </summary>
        </member>
        <member name="M:Hangman.Scoreboard.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangman.Scoreboard"/> class.
            </summary>
            <param name="numberOfEntriesSaved">The number of entries saved
            in the scoreboard instance.</param>
        </member>
        <member name="M:Hangman.Scoreboard.TryToSignToScoreboard(System.Int32)">
            <summary>
            A method that signs a particular result to the scoreboard.
            </summary>
            <param name="numberOfMistakesMade">The number of mistakes made by the player.</param>
        </member>
        <member name="M:Hangman.Scoreboard.PrintCurrentScoreboard">
            <summary>
            A method that prints the current scoreboard.
            </summary>
        </member>
        <member name="M:Hangman.Scoreboard.ToString">
            <summary>
            An overriding of the ToString method for the scoreboard.
            </summary>
            <returns>A string representation of the records in the board.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.AskForPlayerName">
            <summary>
            A method that gets the name of the player to be added to the list from the user.
            </summary>
            <returns>A string of the player's name that is received from the user.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.GetName">
            <summary>
            A method that gets the name from the user. Used to abstract the logic of getting a name.
            </summary>
            <returns>A string of the name of the user.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.CompareByValue(System.Collections.Generic.KeyValuePair{System.String,System.Int32},System.Collections.Generic.KeyValuePair{System.String,System.Int32})">
            /// <summary>
            A comparison method used for sorting the list.
            </summary>
            <param name="pairA">First item to be compared.</param>
            <param name="pairB">Second item to be compared.</param>
            <returns>An integer value: 0 if the pairs are equal, positive if the second is bigger than
            the first and negative in all other cases.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.AddNewRecord(System.Int32)">
            <summary>
            A method that adds a record to the scoreboard.
            </summary>
            <param name="numberOfMistakesMade">The number of mistakes made by the player.</param>
        </member>
        <member name="M:Hangman.Scoreboard.CheckIfScoreQualifiesForHighScoreList(System.Int32)">
            <summary>
            A helper method that checks if a certain result is good enough to be added to the board.
            </summary>
            <param name="numberOfMistakesMade">The result to be checked.</param>
            <returns>A <typeparamref name="bool"/> value indicating whether the result is good enough.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.NameInList(System.String)">
            <summary>
            A helper method that checks whether a name is already in the board.
            </summary>
            <param name="name">The name to be checked.</param>
            <returns>A <typeparamref name="bool"/> value indicating whether the board contains the name.</returns>
        </member>
        <member name="M:Hangman.Scoreboard.DeleteTheWorstRecord">
            <summary>
            A helper method that removes the lowest result from the board.
            </summary>
        </member>
        <member name="M:Hangman.Scoreboard.SortRecordsAscendingByScore">
            <summary>
            A helper method that sorts the board.
            </summary>
        </member>
        <member name="P:Hangman.Scoreboard.HighScoreList">
            <summary>
            Gets or sets the list of high scores.
            </summary>
        </member>
        <member name="T:Hangman.WordUtilities">
            <summary>
            Class for manipulation and operations with words contained in string arrays.
            </summary>
        </member>
        <member name="M:Hangman.WordUtilities.SelectRandomWord(System.String[])">
            <summary>
            Selects a random word from the passed array.
            </summary>
            <param name="words">The array of words.</param>
            <returns>The randomly selected word.</returns>
        </member>
        <member name="M:Hangman.WordUtilities.GenerateEmptyWordOfUnderscores(System.Int32)">
            <summary>
            Generating a char array of empty underscores with a particular length.
            </summary>
            <param name="wordLength">The length of the word to be 
            visualized with empty underscores.</param>
            <returns>The char array of empty underscores.</returns>
        </member>
        <member name="M:Hangman.WordUtilities.CheckIfWordIsRevealed(System.Char[])">
            <summary>
            Checks whether all the letters of the word have been guessed.
            </summary>
            <param name="displayableWord">The array with word characters.</param>
            <returns>A boolean value indicating whether the word is revealed.</returns>
        </member>
        <member name="M:Hangman.WordUtilities.CheckUserGuess(System.String,System.String,System.Char[])">
            <summary>
            A method that checks whether a letter is contained in a word in a non-revealed position.
            </summary>
            <param name="suggestedLetter">The letter to be checked.</param>
            <param name="secretWord">The word that is being guessed.</param>
            <param name="displayableWord">The array of revealed and non-revealed characters.</param>
            <returns>The number of occurrences of the letter.</returns>
        </member>
        <member name="M:Hangman.WordUtilities.CheckIfLetterIsAlreadyRevealed(System.String,System.Char[])">
            <summary>
            Checks whether the letter is already revealed.
            </summary>
            <param name="suggestedLetter">The letter to be checked.</param>
            <param name="displayableWord">The array of revealed and non-revealed characters.</param>
            <returns>A boolean value indicating whether the letter is already revealed.</returns>
        </member>
    </members>
</doc>
